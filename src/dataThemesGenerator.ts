import { readFile, writeFile } from 'node:fs/promises'
import { glob } from 'glob'
import { parse } from 'yaml'
import { join } from 'node:path'

export interface ThemeConfig {
  key: string
  label: string
  value: string
  target: string
}

/**
 * Generate Storybook data-themes.ts configuration from *.ui_skins.themes.yml files
 */
export async function generateThemes(): Promise<void> {
  console.log('🎨 Generating theme configuration from *.ui_skins.themes.yml files...')
  
  try {
    // Find all theme files
    const themeFiles = await glob('**/*.ui_skins.themes.yml', { cwd: process.cwd() })
    
    if (themeFiles.length === 0) {
      console.log('⚠️  No *.ui_skins.themes.yml files found')
      return
    }
    
    console.log(`📁 Found ${themeFiles.length} theme file(s):`, themeFiles)
    
    const themes: ThemeConfig[] = []
    
    // Parse each theme file
    for (const themeFile of themeFiles) {
      try {
        const content = await readFile(themeFile, 'utf8')
        const themeData = parse(content)
        
        // Extract theme information
        for (const [themeKey, themeConfig] of Object.entries(themeData)) {
          if (typeof themeConfig === 'object' && themeConfig !== null) {
            themes.push({
              key: themeKey,
              label: (themeConfig as any).label || themeKey,
              value: themeKey,
              target: (themeConfig as any).target || 'body'
            })
          }
        }
        
        console.log(`✅ Parsed theme file: ${themeFile}`)
      } catch (error) {
        console.error(`❌ Error parsing ${themeFile}:`, (error as Error).message)
      }
    }
    
    if (themes.length === 0) {
      console.log('⚠️  No themes found in the files')
      return
    }
    
    console.log(`🎯 Found ${themes.length} theme(s):`, themes.map(t => t.key))
    
    // Generate the themes configuration file
    const themesConfigContent = generateThemesConfig(themes)
    const themesConfigPath = join(process.cwd(), '.storybook', 'data-themes.ts')
    await writeFile(themesConfigPath, themesConfigContent, 'utf8')
    
    console.log(`✅ Generated data-themes.ts with ${themes.length} theme(s)`)
    console.log(`📝 Updated: ${themesConfigPath}`)
    console.log(`💡 To use themes, add to your preview.ts:`)
    console.log(`   import { themeDecorators, themeGlobalTypes } from './data-themes'`)
    console.log(`   Then add ...themeDecorators to decorators and ...themeGlobalTypes to globalTypes`)
    
  } catch (error) {
    console.error('❌ Error generating themes:', error)
    throw error
  }
}

/**
 * Generate the themes configuration file
 */
export function generateThemesConfig(themes: ThemeConfig[]): string {
  const themeItems = themes.map(theme => 
    `        { value: '${theme.value}', title: '${theme.label}' }`
  ).join(',\n')
  
  const defaultTheme = themes.length > 0 ? themes[0].value : 'default'
  const defaultTarget = themes.length > 0 ? themes[0].target : 'body'
  
  // Create theme target mapping
  const themeTargets = themes.map(theme => 
    `    '${theme.value}': '${theme.target}'`
  ).join(',\n')
  
  return `// Auto-generated theme configuration from *.ui_skins.themes.yml files
// This file is automatically generated - do not edit manually

// Theme target mapping
const themeTargets = {
${themeTargets}
};

// Add a decorator to set data-theme on the correct target element
export const themeDecorators = [
  (storyFn, context) => {
    // Wait for the target element to be available
    setTimeout(() => {
      const selectedTheme = context.globals.theme || '${defaultTheme}';
      const targetSelector = themeTargets[selectedTheme] || '${defaultTarget}';
      
      // Remove data-theme from both html and body to clean previous themes
      const html = document.querySelector('html');
      const body = document.querySelector('body');
      if (html) html.removeAttribute('data-theme');
      if (body) body.removeAttribute('data-theme');
      
      // Apply the new theme to the correct target
      const target = document.querySelector(targetSelector);
      if (target) {
        target.setAttribute('data-theme', selectedTheme);
      }
    }, 0);
    return storyFn();
  },
];

export const themeGlobalTypes = {
  theme: {
    name: 'Theme',
    description: 'Global theme for components',
    defaultValue: '${defaultTheme}',
    toolbar: {
      icon: 'paintbrush',
      items: [
${themeItems}
      ],
    },
  },
};
`
}
